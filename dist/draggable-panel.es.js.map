{"version":3,"file":"draggable-panel.es.js","sources":["../src/components/draggablePanel/index.ts"],"sourcesContent":["import {\n    markRaw,\n    defineComponent,\n    PropType,\n    ref,\n    computed,\n    watch,\n    h,\n    onMounted,\n    onBeforeUnmount,\n}\n    from 'vue'\n\nimport {\n    ChartItem,\n    Position,\n    Style,\n} from '../../../types/draggable-panel'\nimport './index.sass'\n\nexport default markRaw(defineComponent({\n    name : 'draggable-panel',\n    props: {\n        width         : {\n            required: true,\n            type    : Number as PropType<number>,\n        },\n        height        : {\n            required: true,\n            type    : Number as PropType<number>,\n        },\n        data          : {\n            required: true,\n            type    : Array as PropType<ChartItem[]>,\n        },\n        chartMinWidth : {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 100,\n        },\n        chartMinHeight: {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 100,\n        },\n        padding       : {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 32,\n        },\n        lock          : {\n            required: false,\n            type    : Boolean as PropType<boolean>,\n            default : false,\n        },\n        canvasStyle   : {\n            required: false,\n            type    : Object as PropType<Style>,\n            default : {},\n        },\n        chartStyle    : {\n            required: false,\n            type    : Object as PropType<Style>,\n            default : {},\n        },\n        scaleMin      : {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 0.5,\n        },\n        scaleMax      : {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 10,\n        },\n        chartId       : {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 0,\n        },\n    },\n    emits: [\n        'canvas-scale',\n        'canvas-drop',\n        'chart-move',\n        'chart-scale',\n    ],\n    setup (props, ctx) {\n        const container         = ref<HTMLElement | null>(null)\n        const canvas            = ref<HTMLElement | null>(null)\n        const canvasStatusMove  = ref<boolean>(false)\n        const pointerPressed    = ref<boolean>(false)\n        const outCanvasDragover = ref<boolean>(false)\n        const defaultScale      = ref<number>(1)\n        const scale             = ref<number>(1)\n        const defaultX          = ref<number>(0)\n        const defaultY          = ref<number>(0)\n        const canvasX           = ref<number>(0)\n        const canvasY           = ref<number>(0)\n        const resizeDirection   = ref<string>('')\n        const movingChart       = ref<ChartItem | null>(null)\n        const resizingChart     = ref<ChartItem | null>(null)\n        const originalChart     = ref<ChartItem | null>(null)\n        const diff              = ref<Position>({ x: 0, y: 0 })\n        const point             = ref<Position>({ x: 0, y: 0 })\n        const lastPointermove   = ref<Position>({ x: 0, y: 0 })\n        const chartPosition     = ref<Position>({ x: 0, y: 0 })\n        const dragend           = ref<boolean>(false)\n\n        let selectedChart = ref<number>(0)\n\n        const canvasStyleComputed = computed(() => ({\n            ...props.canvasStyle,\n            ...{\n                'width'    : props.width + 'px',\n                'height'   : props.height + 'px',\n                'transform': [\n                    // translate3d better than translate\n                    `translate3d(${canvasX.value}px, ${canvasY.value}px, 0)`,\n                    `scale(${scale.value})`,\n                ].join(' '),\n            },\n        }))\n        const chartStyleComputed  = computed(() => {\n            return (chartItem: ChartItem, index: number) => {\n                const { width, height, x, y } = chartItem\n                return {\n                    ...props.chartStyle,\n                    ...{\n                        // translate better than translate3d\n                        // translate3d causes blurry content\n                        'width'    : width + 'px',\n                        'height'   : height + 'px',\n                        'transform': `translateX(${x}px) translateY(${y}px)`,\n                        'z-index'  : 100 + index,\n                    },\n                }\n            }\n        })\n        const pointStyleComputed  = computed(() => {\n            return (chartItem: ChartItem) => {\n                const { width, height } = chartItem\n                const display           = (selectedChart.value === chartItem.id && !props.lock) ? 'block' : 'none'\n                return {\n                    ...{\n                        'width' : width + 'px',\n                        'height': height + 'px',\n                        display,\n                    },\n                }\n            }\n        })\n\n        watch(scale, newScale => ctx.emit('canvas-scale', newScale))\n\n        /**\n         * Scale canvas by wheel\n         * @param event\n         */\n        const scaleByWheel = (event: WheelEvent) => {\n            const { ctrlKey, metaKey } = event\n\n            if (!ctrlKey && !metaKey) return\n\n            event.preventDefault()\n\n            if (props.lock) return\n\n            let ratio = 1 / (1 + event.deltaY * 0.001)\n            let zoom  = scale.value * ratio\n\n            if (zoom > props.scaleMax) {\n                ratio = props.scaleMax / scale.value\n                zoom  = props.scaleMax\n            }\n\n            if (zoom < props.scaleMin) {\n                ratio = props.scaleMin / scale.value\n                zoom  = props.scaleMin\n            }\n\n            scale.value = zoom\n\n            const origin = {\n                x: (ratio - 1) * props.width * 0.5,\n                y: (ratio - 1) * props.height * 0.5,\n            }\n\n            canvasX.value -= (ratio - 1) * (event.clientX - canvasX.value) - origin.x\n            canvasY.value -= (ratio - 1) * (event.clientY - canvasY.value) - origin.y\n        }\n\n        /**\n         * Scale canvas add\n         * @param event\n         */\n        const scaleAddByKeyboard = (event: KeyboardEvent) => {\n            event.preventDefault()\n\n            if (props.lock) return\n\n            let zoom = scale.value + 0.1\n\n            if (zoom > props.scaleMax) zoom = props.scaleMax\n\n            scale.value = zoom\n        }\n\n        /**\n         * Scale canvas sub\n         * @param event\n         */\n        const scaleSubByKeyboard = (event: KeyboardEvent) => {\n            event.preventDefault()\n\n            if (props.lock) return\n\n            let zoom = scale.value - 0.1\n\n            if (zoom < props.scaleMin) zoom = props.scaleMin\n\n            scale.value = zoom\n        }\n\n        /**\n         * Reset scale\n         */\n        const resetScale = () => {\n            if (props.lock) return\n\n            scale.value   = defaultScale.value\n            canvasX.value = defaultX.value\n            canvasY.value = defaultY.value\n        }\n\n        /**\n         * Real scale\n         */\n        const realScale = () => {\n            if (props.lock) return\n\n            const { offsetWidth, offsetHeight } = container.value\n\n            scale.value   = 1\n            canvasX.value = (offsetWidth - props.width) / 2\n            canvasY.value = (offsetHeight - props.height) / 2\n        }\n\n        /**\n         * Panel Pointer Down\n         * @param event\n         */\n        const panelPointerDown = (event: PointerEvent) => {\n            if (event.srcElement === container.value || event.srcElement === canvas.value) selectedChart.value = 0\n        }\n\n        /**\n         * Pointer down\n         * @param event\n         */\n        const pointerDown = (event: PointerEvent) => {\n            if (!canvasStatusMove.value || props.lock) return\n\n            pointerPressed.value = true\n\n            canvas.value.setPointerCapture(event.pointerId)\n\n            point.value           = { x: event.clientX, y: event.clientY }\n            lastPointermove.value = { x: event.clientX, y: event.clientY }\n        }\n\n        /**\n         * Pointer move\n         * @param event\n         */\n        const pointermove = (event: PointerEvent) => {\n            if (!pointerPressed.value) return\n\n            event.preventDefault()\n\n            const current = { x: event.clientX, y: event.clientY }\n\n            diff.value = {\n                x: current.x - lastPointermove.value.x,\n                y: current.y - lastPointermove.value.y,\n            }\n\n            lastPointermove.value = { x: current.x, y: current.y }\n            canvasX.value += diff.value.x\n            canvasY.value += diff.value.y\n        }\n\n        /**\n         * Pointer up\n         */\n        const pointerUp = () => {\n            pointerPressed.value = false\n        }\n\n        /**\n         * Pointer cancel\n         */\n        const pointerCancel = () => {\n            pointerPressed.value = false\n        }\n\n        /**\n         * chart move pointer down\n         */\n        const chartMovePointerDown = (event: PointerEvent, chart: ChartItem) => {\n            if (canvasStatusMove.value || props.lock) return\n\n            selectedChart.value = chart.id as number\n\n            movingChart.value   = chart\n            chartPosition.value = {\n                x: event.clientX - chart.x * scale.value,\n                y: event.clientY - chart.y * scale.value,\n            }\n\n            originalChart.value = {\n                id    : chart.id,\n                x     : chart.x,\n                y     : chart.y,\n                width : chart.width,\n                height: chart.height,\n            }\n\n            document.onpointermove = (ev: PointerEvent) => {\n                if (!movingChart.value) return false\n                ev.preventDefault()\n                const { clientX, clientY } = ev\n\n                const offsetX = (clientX - chartPosition.value.x) / scale.value\n                const offsetY = (clientY - chartPosition.value.y) / scale.value\n\n                const { width, height } = movingChart.value\n                const maxX              = props.width - width\n                const maxY              = props.height - height\n                let newX                = offsetX\n                let newY                = offsetY\n\n                if (newX < 0) newX = 0\n                if (newY < 0) newY = 0\n                if (newX > maxX) newX = maxX\n                if (newY > maxY) newY = maxY\n\n                movingChart.value.x = newX\n                movingChart.value.y = newY\n            }\n        }\n\n        /**\n         * chart move pointer up\n         */\n        const chartMovePointerUp = (event, item) => {\n            document.onpointermove = null\n            movingChart.value      = null\n\n            if (originalChart.value.x !== item.x || originalChart.value.y !== item.y) ctx.emit('chart-move', item)\n        }\n\n        /**\n         * chart move cancel\n         */\n        const chartMoveCancel = () => {\n            document.onpointermove = null\n            movingChart.value      = null\n        }\n\n        /**\n         * resize pointer down\n         */\n        const resizePointerDown = (event: DragEvent, chart: ChartItem, direction: string) => {\n            event.stopPropagation()\n\n            if (canvasStatusMove.value) return\n\n            const chartWidth      = chart.width\n            const chartHeight     = chart.height\n            const chartX          = chart.x\n            const chartY          = chart.y\n            resizingChart.value   = chart\n            resizeDirection.value = direction\n            chartPosition.value   = {\n                x: event.clientX,\n                y: event.clientY,\n            }\n\n            originalChart.value = {\n                id    : chart.id,\n                x     : chart.x,\n                y     : chart.y,\n                width : chart.width,\n                height: chart.height,\n            }\n\n            document.onpointermove = (ev: PointerEvent) => {\n                if (!resizingChart.value) return false\n\n                const { clientX, clientY } = ev\n                const offsetX              = (clientX - chartPosition.value.x) / scale.value\n                const offsetY              = (clientY - chartPosition.value.y) / scale.value\n\n                const { width, height, x, y } = resizingChart.value\n                const chartMaxWidth           = props.width - x\n                const chartMaxHeight          = props.height - y\n                const direction               = resizeDirection.value\n\n                let newWidth  = width\n                let newHeight = height\n                let newX      = x\n                let newY      = y\n\n                const resizeWidth  = () => {\n                    newWidth = chartWidth + offsetX\n                    if (newWidth < props.chartMinWidth) newWidth = width\n                    if (newWidth > chartMaxWidth) newWidth = chartMaxWidth\n                }\n                const resizeHeight = () => {\n                    newHeight = chartHeight + offsetY\n                    if (newHeight < props.chartMinHeight) newHeight = height\n                    if (newHeight > chartMaxHeight) newHeight = chartMaxHeight\n                }\n\n                const resizeWidthWithX  = () => {\n                    newX     = chartX + offsetX\n                    newWidth = chartWidth - offsetX\n\n                    if (newX < 0) {\n                        newX     = 0\n                        newWidth = width + x\n                    }\n\n                    if (newWidth < props.chartMinWidth) {\n                        newWidth = width\n                        newX     = x\n                    }\n                }\n                const resizeHeightWithY = () => {\n                    newY      = chartY + offsetY\n                    newHeight = chartHeight - offsetY\n\n                    if (newY < 0) {\n                        newY      = 0\n                        newHeight = height + y\n                    }\n\n                    if (newHeight < props.chartMinHeight) {\n                        newHeight = height\n                        newY      = y\n                    }\n                }\n\n                if (direction === 'a') {\n                    resizeWidthWithX()\n                    resizeHeightWithY()\n                }\n\n                if (direction === 'b') {\n                    resizeWidth()\n                    resizeHeightWithY()\n                }\n\n                if (direction === 'c') {\n                    resizeWidth()\n                    resizeHeight()\n                }\n\n                if (direction === 'd') {\n                    resizeWidthWithX()\n                    resizeHeight()\n                }\n\n                if (direction === 'i') resizeHeightWithY()\n                if (direction === 'j') resizeWidth()\n                if (direction === 'k') resizeHeight()\n                if (direction === 'l') resizeWidthWithX()\n\n                resizingChart.value.width  = newWidth\n                resizingChart.value.height = newHeight\n                resizingChart.value.x      = newX\n                resizingChart.value.y      = newY\n            }\n        }\n\n        /**\n         * resize pointer up\n         */\n        const resizePointerUp = (event, item) => {\n            event.stopPropagation()\n\n            document.onpointermove = null\n            resizingChart.value    = null\n\n            if (originalChart.value.x !== item.x\n                || originalChart.value.y !== item.y\n                || originalChart.value.width !== item.width\n                || originalChart.value.height !== item.height) ctx.emit('chart-scale', item)\n        }\n\n        /**\n         * Dragover over container (move/resize)\n         * @param event\n         */\n        const dragoverContainer = (event: DragEvent) => {\n            event.preventDefault()\n\n            const { clientX, clientY } = event\n            chartPosition.value        = { x: clientX, y: clientY }\n        }\n\n        /**\n         * Drop in canvas\n         * @param event\n         */\n        const dropInCanvas = (event: DragEvent) => {\n            if (movingChart.value || resizingChart.value) return\n\n            dragend.value           = true\n            outCanvasDragover.value = false\n\n            ctx.emit('canvas-drop', event, {\n                x: event.offsetX,\n                y: event.offsetY,\n            })\n        }\n\n        /**\n         * Drag in from outside the canvas\n         */\n        const dragenterCanvas = () => {\n            if (movingChart.value || resizingChart.value) return\n\n            outCanvasDragover.value = true\n        }\n\n        /**\n         * Drag in from outside the canvas cancel\n         */\n        const dragleaveCanvas = (event) => {\n            if (canvas.value === event.srcElement) outCanvasDragover.value = false\n        }\n\n        /**\n         * Canvas init\n         */\n        function init () {\n            const { offsetWidth, offsetHeight } = container.value as HTMLElement\n            const defaultMaxWidth               = offsetWidth - props.padding\n            const defaultMaxHeight              = offsetHeight - props.padding\n            const ratioContainer                = offsetWidth / offsetHeight\n            const ratioCanvas                   = props.width / props.height\n\n            defaultScale.value = ratioContainer < ratioCanvas\n                ? defaultMaxWidth / props.width\n                : defaultMaxHeight / props.height\n            defaultX.value     = (offsetWidth - props.width) / 2\n            defaultY.value     = (offsetHeight - props.height) / 2\n            scale.value        = defaultScale.value\n            canvasX.value      = defaultX.value\n            canvasY.value      = defaultY.value\n        }\n\n        /**\n         * Create Resizable h Dom\n         * @param chartItem\n         */\n        function createResizableList (chartItem) {\n            const pointDirectionList          = ['a', 'b', 'c', 'd']\n            const resizablePointDirectionList = ['e', 'f', 'g', 'h']\n            const lineDirectionList           = ['i', 'j', 'k', 'l']\n            const resizableList               = []\n\n            pointDirectionList.forEach(direction => {\n                resizableList.push(h('div', {\n                    class        : [\n                        'resizable-point',\n                        direction,\n                    ],\n                    key          : direction,\n                    onPointerdown: event => resizePointerDown(event, chartItem, direction),\n                    onPointerup  : event => resizePointerUp(event, chartItem),\n                }))\n            })\n\n            resizablePointDirectionList.forEach(direction => {\n                resizableList.push(h('div', {\n                    class: [\n                        'resizable-point',\n                        direction,\n                    ],\n                    key  : direction,\n                }))\n            })\n\n            lineDirectionList.forEach(direction => {\n                resizableList.push(h('div', {\n                    class        : [\n                        'resizable-line',\n                        direction,\n                    ],\n                    key          : direction,\n                    onPointerdown: event => resizePointerDown(event, chartItem, direction),\n                    onPointerup  : event => resizePointerUp(event, chartItem),\n                }))\n            })\n\n            return resizableList\n        }\n\n        /**\n         * Create Chart h Dom\n         */\n        function createChartList () {\n            const chartList = []\n\n            if (dragend.value) {\n                selectedChart.value = props.chartId\n                dragend.value       = false\n            }\n\n            props.data.forEach((item, index) => {\n\n                const defaultSlot = ctx.slots.chart({\n                    chart: item,\n                    index,\n                })\n                const customSlot  = ctx.slots[`chart-${item.id}`]\n                    ? ctx.slots[`chart-${item.id}`]({\n                        chart: item,\n                        index,\n                    })\n                    : null\n\n                chartList.push(h('div', {\n                    class          : [\n                        'chart-item',\n                        movingChart.value?.id === item.id ? 'moving' : '',\n                        resizingChart.value?.id === item.id ? 'resizing' : '',\n                    ],\n                    key            : item.id,\n                    style          : chartStyleComputed.value(item, index),\n                    ['data-id']    : item.id,\n                    onPointerdown  : event => chartMovePointerDown(event, item),\n                    onPointerup    : event => chartMovePointerUp(event, item),\n                    onPointercancel: chartMoveCancel,\n                }, [\n                    h('div', {\n                        class: ['content'],\n                    }, [\n                        defaultSlot,\n                        customSlot,\n                    ]),\n                    h('div', {\n                        class: ['resizable'],\n                        style: pointStyleComputed.value(item),\n                    }, createResizableList(item)),\n                ]))\n            })\n\n            return chartList\n        }\n\n        /**\n         * Catch Event mouseup\n         */\n        function catchMouseup () {\n            document.onpointermove = null\n            resizingChart.value    = null\n            movingChart.value      = null\n        }\n\n        onMounted(() => {\n            init()\n            window.addEventListener('resize', init)\n            window.addEventListener('mouseup', catchMouseup)\n        })\n\n        onBeforeUnmount(() => {\n            window.removeEventListener('resize', init)\n            window.removeEventListener('mouseup', catchMouseup)\n        })\n\n        return () => [\n            h('div', {\n                class    : [\n                    'draggable-panel',\n                    props.lock ? 'lock' : '',\n                ],\n                tabindex : -1,\n                ref      : container,\n                autofocus: true,\n                onkeydown (event: KeyboardEvent) {\n                    const { ctrlKey, metaKey } = event\n                    const code                 = event.code.toLowerCase()\n\n                    // TODO: exact\n                    if (code === 'space') return canvasStatusMove.value = true\n                    if (code === 'equal' && (ctrlKey || metaKey)) return scaleAddByKeyboard(event)\n                    if (code === 'minus' && (ctrlKey || metaKey)) return scaleSubByKeyboard(event)\n                    if (code === 'digit0') {\n                        event.preventDefault()\n                        return resetScale()\n                    }\n                    if (code === 'enter') {\n                        event.preventDefault()\n                        return realScale()\n                    }\n                },\n                onkeyup (event: KeyboardEvent) {\n                    const code = event.code.toLowerCase()\n\n                    if (code === 'space') canvasStatusMove.value = false\n                },\n                onPointerdown: panelPointerDown,\n                onwheel      : scaleByWheel,\n                onDragover   : dragoverContainer,\n            }, h('div', {\n                ref            : canvas,\n                class          : [\n                    'canvas',\n                    outCanvasDragover.value ? 'out-canvas-dragover' : '',\n                    canvasStatusMove.value ? 'moving' : '',\n                ],\n                style          : canvasStyleComputed.value,\n                onPointerdown  : pointerDown,\n                onPointermove  : pointermove,\n                onPointerup    : pointerUp,\n                onPointercancel: pointerCancel,\n                onDragenter    : dragenterCanvas,\n                onDragleave    : dragleaveCanvas,\n                onDrop         : dropInCanvas,\n            }, createChartList())),\n        ]\n    },\n}))\n"],"names":[],"mappings":"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"}