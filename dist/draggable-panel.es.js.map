{"version":3,"file":"draggable-panel.es.js","sources":["../plugin-vue:export-helper","../src/components/draggablePanel/index.vue"],"sourcesContent":["\nexport default (sfc, props) => {\n  const target = sfc.__vccOpts || sfc;\n  for (const [key, val] of props) {\n    target[key] = val;\n  }\n  return target;\n}\n","<template>\n    <div class=\"draggable-panel\"\n         :class=\"{\n             'lock': lock,\n         }\"\n         :tabindex=\"-1\"\n         ref=\"container\"\n         autofocus\n         @keydown.space=\"canvasStatusMove = true\"\n         @keydown.meta=\"scaleByKeyboard\"\n         @keydown.ctrl=\"scaleByKeyboard\"\n         @keyup.space=\"canvasStatusMove = false\"\n         @wheel.ctrl.prevent=\"scaleByWheel\"\n         @wheel.meta.prevent=\"scaleByWheel\"\n         @dragover.prevent=\"dragoverContainer\">\n        <div class=\"canvas\"\n             ref=\"canvas\"\n             :style=\"canvasStyleComputed\"\n             @pointerdown=\"pointerDown\"\n             @pointermove=\"pointermove\"\n             @pointerup=\"pointerUp\"\n             @pointercancel=\"pointerCancel\">\n            <div class=\"chart-item\"\n                 :class=\"{\n                     'moving'  : movingChart?.id   === item.id,\n                     'resizing': resizingChart?.id === item.id,\n                 }\"\n                 v-for=\"(item, index) in data\"\n                 :key=\"item.id\"\n                 :style=\"chartStyleComputed(item, index)\"\n                 :data-id=\"item.id\"\n                 tabindex=\"-1\"\n                 :draggable=\"!lock\"\n                 @mousedown=\"setChartPosition\"\n                 @dragstart=\"chartDragstart($event, item)\"\n                 @dragend=\"chartDragend\">\n                <div class=\"content\">\n                    <slot :name=\"'chart-' + item.id\" :chart=\"item\" :index=\"index\">\n                        <slot name=\"chart\" :chart=\"item\" :index=\"index\"/>\n                    </slot>\n                </div>\n                <div class=\"resizable\">\n                    <div v-for=\"direction in ['a', 'c', 'e', 'g']\"\n                         :key=\"direction\"\n                         class=\"resizable-point\"\n                         :class=\"direction\"\n                         tabindex=\"-1\"\n                         draggable=\"true\"\n                         @dragstart.stop=\"resizeStart($event, item, direction)\">\n                    </div>\n\n                    <div v-for=\"direction in ['b', 'd', 'f', 'h']\"\n                         :key=\"direction\"\n                         :class=\"direction\"\n                         class=\"resizable-point\">\n                    </div>\n\n                    <div v-for=\"direction in ['i', 'j', 'k', 'l']\"\n                         :key=\"direction\"\n                         :class=\"direction\"\n                         class=\"resizable-line\"\n                         tabindex=\"-1\"\n                         draggable=\"true\"\n                         @dragstart.stop=\"resizeStart($event, item, direction)\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport { ref, computed, onMounted, onBeforeUnmount, defineComponent, PropType } from 'vue'\n\ninterface ChartItem {\n    id: number | string\n    width: number\n    height: number\n    x: number\n    y: number\n}\n\ninterface Position {\n    x: number\n    y: number\n}\n\ninterface Style {\n    [name: string]: any\n}\n\nexport default defineComponent({\n    name : 'draggable-panel',\n    props: {\n        width         : {\n            required: true,\n            type    : Number as PropType<number>,\n        },\n        height        : {\n            required: true,\n            type    : Number as PropType<number>,\n        },\n        data          : {\n            required: true,\n            type    : Array as PropType<ChartItem[]>,\n        },\n        chartMinWidth : {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 100,\n        },\n        chartMinHeight: {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 100,\n        },\n        padding       : {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 32,\n        },\n        lock          : {\n            required: false,\n            type    : Boolean as PropType<boolean>,\n            default : false,\n        },\n        canvasStyle   : {\n            required: false,\n            type    : Object as PropType<Style>,\n            default : {},\n        },\n        chartStyle    : {\n            required: false,\n            type    : Object as PropType<Style>,\n            default : {},\n        },\n        scaleMin      : {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 0.5,\n        },\n        scaleMax      : {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 10,\n        },\n    },\n    setup (props) {\n        const container        = ref<HTMLElement | null>(null)\n        const canvas           = ref<HTMLElement | null>(null)\n        const canvasStatusMove = ref<boolean>(false)\n        const pointerPressed   = ref<boolean>(false)\n        const defaultScale     = ref<number>(1)\n        const scale            = ref<number>(1)\n        const defaultX         = ref<number>(0)\n        const defaultY         = ref<number>(0)\n        const canvasX          = ref<number>(0)\n        const canvasY          = ref<number>(0)\n        const resizeDirection  = ref<string>('')\n        const movingChart      = ref<ChartItem | null>(null)\n        const resizingChart    = ref<ChartItem | null>(null)\n        const diff             = ref<Position>({ x: 0, y: 0 })\n        const point            = ref<Position>({ x: 0, y: 0 })\n        const lastPointermove  = ref<Position>({ x: 0, y: 0 })\n        const chartPosition    = ref<Position>({ x: 0, y: 0 })\n\n        const canvasStyleComputed = computed(() => ({\n            ...props.canvasStyle,\n            ...{\n                'width'    : props.width + 'px',\n                'height'   : props.height + 'px',\n                'transform': [\n                    // translate3d better than translate\n                    `translate3d(${canvasX.value}px, ${canvasY.value}px, 0)`,\n                    `scale(${scale.value})`,\n                ].join(' '),\n            },\n        }))\n\n        const chartStyleComputed = computed(() => {\n            return (chartItem: ChartItem, index: number) => {\n                const { width, height, x, y } = chartItem\n                return {\n                    ...props.chartStyle,\n                    ...{\n                        'width' : width + 'px',\n                        'height': height + 'px',\n                        // translate better than translate3d\n                        // translate3d causes blurry content\n                        'transform': `translateX(${x}px) translateY(${y}px)`,\n                        'z-index'  : 100 + index,\n                    },\n                }\n            }\n        })\n\n        /**\n         * Canvas init\n         */\n        function init () {\n            const { offsetWidth, offsetHeight } = container.value as HTMLElement\n            const defaultMaxWidth               = offsetWidth - props.padding\n            const defaultMaxHeight              = offsetHeight - props.padding\n            const ratioContainer                = offsetWidth / offsetHeight\n            const ratioCanvas                   = props.width / props.height\n\n            defaultScale.value = ratioContainer < ratioCanvas\n                ? defaultMaxWidth / props.width\n                : defaultMaxHeight / props.height\n            defaultX.value     = (offsetWidth - props.width) / 2\n            defaultY.value     = (offsetHeight - props.height) / 2\n            scale.value        = defaultScale.value\n            canvasX.value      = defaultX.value\n            canvasY.value      = defaultY.value\n        }\n\n        onMounted(() => {\n            init()\n            window.addEventListener('resize', init)\n        })\n\n        onBeforeUnmount(() => {\n            window.removeEventListener('resize', init)\n        })\n\n        return {\n            container,              // Element Container\n            canvas,                 // Element Canvas\n            defaultX,               // Canvas default X\n            defaultY,               // Canvas default Y\n            defaultScale,           // Canvas default scale\n            scale,                  // Canvas scale value\n            point,                  // Canvas move start position\n            lastPointermove,        // Canvas move position\n            diff,                   // Canvas move position diff\n            movingChart,            // Chart in moving state\n            resizingChart,          // Chart in resizing state\n            resizeDirection,        // Chart resize direction\n            chartPosition,          // Chart drag position\n            canvasX,                // Canvas translateX\n            canvasY,                // Canvas translateY\n            canvasStatusMove,       // Keyboard Space press state\n            pointerPressed,         // Pointer press state\n            canvasStyleComputed,    // Canvas style\n            chartStyleComputed,     // Chart style\n        }\n    },\n    watch  : {\n        scale (newVal) {\n            this.$emit('canvas-scale', newVal)\n        },\n    },\n    methods: {\n        /**\n         * Scale canvas by wheel\n         * @param event\n         */\n        scaleByWheel (event: WheelEvent) {\n            if (this.lock) return\n\n            let ratio = 1 / (1 + event.deltaY * 0.001)\n            let scale = this.scale * ratio\n\n            if (scale > this.scaleMax) {\n                ratio = this.scaleMax / this.scale\n                scale = this.scaleMax\n            }\n\n            if (scale < this.scaleMin) {\n                ratio = this.scaleMin / this.scale\n                scale = this.scaleMin\n            }\n\n            this.scale = scale\n\n            const origin = {\n                x: (ratio - 1) * this.width * 0.5,\n                y: (ratio - 1) * this.height * 0.5,\n            }\n\n            this.canvasX -= (ratio - 1) * (event.clientX - this.canvasX) - origin.x\n            this.canvasY -= (ratio - 1) * (event.clientY - this.canvasY) - origin.y\n        },\n        /**\n         * Scale canvas by ctrl ++ / ctrl --\n         * Scale canvas by command ++ / command --\n         * @param event\n         */\n        scaleByKeyboard (event: KeyboardEvent) {\n            const { key } = event\n\n            if (['=', '-', '0'].includes(key) && this.lock) return event.preventDefault()\n\n            if (key === '=') {\n                event.preventDefault()\n\n                let scale = this.scale + 0.1\n\n                if (scale > this.scaleMax) scale = this.scaleMax\n\n                this.scale = scale\n            }\n\n            if (key === '-') {\n                event.preventDefault()\n\n                let scale = this.scale - 0.1\n\n                if (scale < this.scaleMin) scale = this.scaleMin\n\n                this.scale = scale\n            }\n\n            if (key === '0') {\n                event.preventDefault()\n\n                this.scale   = this.defaultScale\n                this.canvasX = this.defaultX\n                this.canvasY = this.defaultY\n            }\n        },\n        /**\n         * Set chart position\n         * @param event\n         */\n        setChartPosition (event: MouseEvent) {\n            this.chartPosition = {\n                x: event.clientX,\n                y: event.clientY,\n            }\n        },\n        /**\n         * Dragover over container (move/resize)\n         * @param event\n         */\n        dragoverContainer (event: DragEvent) {\n            const { clientX, clientY } = event\n            const offsetX              = (clientX - this.chartPosition.x) / this.scale\n            const offsetY              = (clientY - this.chartPosition.y) / this.scale\n\n            this.chartPosition = { x: clientX, y: clientY }\n\n            if (this.movingChart) {\n                const { width, height, x, y } = this.movingChart\n                const maxX                    = this.width - width\n                const maxY                    = this.height - height\n\n                let newX = x + offsetX\n                let newY = y + offsetY\n\n                if (newX < 0) newX = 0\n                if (newY < 0) newY = 0\n                if (newX > maxX) newX = maxX\n                if (newY > maxY) newY = maxY\n\n                this.movingChart.x = newX\n                this.movingChart.y = newY\n            }\n\n            if (this.resizingChart) {\n                const { width, height, x, y } = this.resizingChart\n                const chartMaxWidth           = this.width - x\n                const chartMaxHeight          = this.height - y\n\n                let newWidth  = width\n                let newHeight = height\n                let newX      = x\n                let newY      = y\n\n                const resizeWidth       = () => {\n                    newWidth += offsetX\n                    if (newWidth < this.chartMinWidth) newWidth = width\n                    if (newWidth > chartMaxWidth) newWidth = chartMaxWidth\n                }\n                const resizeHeight      = () => {\n                    newHeight += offsetY\n                    if (newHeight < this.chartMinHeight) newHeight = height\n                    if (newHeight > chartMaxHeight) newHeight = chartMaxHeight\n                }\n                const resizeWidthWithX  = () => {\n                    newX     = x + offsetX\n                    newWidth = width - offsetX\n\n                    if (newX < 0) {\n                        newX     = 0\n                        newWidth = width + x\n                    }\n\n                    if (newWidth < this.chartMinWidth) {\n                        newWidth = width\n                        newX     = x\n                    }\n                }\n                const resizeHeightWithY = () => {\n                    newY      = y + offsetY\n                    newHeight = height - offsetY\n\n                    if (newY < 0) {\n                        newY      = 0\n                        newHeight = height + y\n                    }\n\n                    if (newHeight < this.chartMinHeight) {\n                        newHeight = height\n                        newY      = y\n                    }\n                }\n\n                if (this.resizeDirection === 'a') {\n                    resizeWidthWithX()\n                    resizeHeightWithY()\n                }\n\n                if (this.resizeDirection === 'c') {\n                    resizeWidth()\n                    resizeHeightWithY()\n                }\n\n                if (this.resizeDirection === 'e') {\n                    resizeWidth()\n                    resizeHeight()\n                }\n\n                if (this.resizeDirection === 'g') {\n                    resizeWidthWithX()\n                    resizeHeight()\n                }\n\n                if (this.resizeDirection === 'i') resizeHeightWithY()\n                if (this.resizeDirection === 'j') resizeWidth()\n                if (this.resizeDirection === 'k') resizeHeight()\n                if (this.resizeDirection === 'l') resizeWidthWithX()\n\n                this.resizingChart.width  = newWidth\n                this.resizingChart.x      = newX\n                this.resizingChart.height = newHeight\n                this.resizingChart.y      = newY\n            }\n        },\n        /**\n         * Chart move/resize start\n         * @param event\n         * @param chart\n         */\n        chartDragstart (event: DragEvent, chart: ChartItem) {\n            if (!event.dataTransfer) return\n\n            const empty = document.createElement('div')\n            event.dataTransfer.setDragImage(empty, 0, 0)\n            event.dataTransfer.effectAllowed = 'move'\n\n            this.movingChart = chart\n        },\n        /**\n         * Chart move/resize end\n         */\n        chartDragend () {\n            this.movingChart   = null\n            this.resizingChart = null\n        },\n        /**\n         * Resize start\n         * @param event\n         * @param chart\n         * @param direction\n         */\n        resizeStart (event: DragEvent, chart: ChartItem, direction: string) {\n            if (!event.dataTransfer) return\n\n            const empty = document.createElement('div')\n            event.dataTransfer.setDragImage(empty, 0, 0)\n            event.dataTransfer.effectAllowed = 'move'\n\n            this.resizingChart   = chart\n            this.resizeDirection = direction\n        },\n        /**\n         * Pointer down\n         * @param event\n         */\n        pointerDown (event: PointerEvent) {\n            if (!this.canvasStatusMove || this.lock) return\n\n            this.pointerPressed = true\n\n            const canvasEl = this.canvas!\n\n            canvasEl.setPointerCapture(event.pointerId)\n\n            this.point           = { x: event.clientX, y: event.clientY }\n            this.lastPointermove = { x: event.clientX, y: event.clientY }\n        },\n        /**\n         * Pointer move\n         * @param event\n         */\n        pointermove (event: PointerEvent) {\n            if (!this.pointerPressed) return\n\n            event.preventDefault()\n\n            const current = { x: event.clientX, y: event.clientY }\n\n            this.diff.x          = current.x - this.lastPointermove.x\n            this.diff.y          = current.y - this.lastPointermove.y\n            this.lastPointermove = { x: current.x, y: current.y }\n            this.canvasX += this.diff.x\n            this.canvasY += this.diff.y\n        },\n        /**\n         * Pointer up\n         */\n        pointerUp () {\n            this.pointerPressed = false\n        },\n        /**\n         * Pointer cancel\n         */\n        pointerCancel () {\n            this.pointerPressed = false\n        },\n    },\n})\n</script>\n\n<style lang=\"sass\" scoped>\n@import \"index\"\n</style>\n"],"names":["_createElementBlock","_normalizeClass","_withKeys","_withModifiers","_createElementVNode","_normalizeStyle","_openBlock","_Fragment","_renderList","_renderSlot"],"mappings":"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"}