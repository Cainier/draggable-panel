{"version":3,"file":"draggable-panel.umd.js","sources":["../plugin-vue:export-helper","../src/components/draggablePanel/index.vue"],"sourcesContent":["\nexport default (sfc, props) => {\n  const target = sfc.__vccOpts || sfc;\n  for (const [key, val] of props) {\n    target[key] = val;\n  }\n  return target;\n}\n","<template>\n    <div class=\"draggable-panel\"\n         :class=\"{\n             'lock': lock,\n         }\"\n         :tabindex=\"-1\"\n         ref=\"container\"\n         autofocus\n         @keydown.space=\"canvasStatusMove = true\"\n         @keydown.meta=\"scaleByKeyboard\"\n         @keydown.ctrl=\"scaleByKeyboard\"\n         @keyup.space=\"canvasStatusMove = false\"\n         @keydown.prevent.0=\"resetScale\"\n         @keydown.prevent.enter=\"realScale\"\n         @wheel.prevent.ctrl=\"scaleByWheel\"\n         @wheel.prevent.meta=\"scaleByWheel\"\n         @dragover.prevent=\"dragoverContainer\">\n        <div class=\"canvas\"\n             ref=\"canvas\"\n             :class=\"{\n                 'out-canvas-dragover': outCanvasDragover,\n                 'moving': canvasStatusMove,\n             }\"\n             :style=\"canvasStyleComputed\"\n             @pointerdown=\"pointerDown\"\n             @pointermove=\"pointermove\"\n             @pointerup=\"pointerUp\"\n             @pointercancel=\"pointerCancel\"\n             @dragenter=\"dragenterCanvas\"\n             @dragleave=\"dragleaveCanvas\"\n             @drop=\"dropInCanvas\">\n            <div class=\"chart-item\"\n                 :class=\"{\n                     'moving'  : movingChart?.id   === item.id,\n                     'resizing': resizingChart?.id === item.id,\n                 }\"\n                 v-for=\"(item, index) in data\"\n                 :key=\"item.id\"\n                 :style=\"chartStyleComputed(item, index)\"\n                 :data-id=\"item.id\"\n                 tabindex=\"-1\"\n                 :draggable=\"!lock\"\n                 @mousedown=\"setChartPosition\"\n                 @dragstart=\"chartDragstart($event, item)\"\n                 @dragend=\"chartDragend\">\n                <div class=\"content\">\n                    <slot :name=\"'chart-' + item.id\" :chart=\"item\" :index=\"index\">\n                        <slot name=\"chart\" :chart=\"item\" :index=\"index\"/>\n                    </slot>\n                </div>\n                <div class=\"resizable\">\n                    <div v-for=\"direction in ['a', 'b', 'c', 'd']\"\n                         :key=\"direction\"\n                         class=\"resizable-point\"\n                         :class=\"direction\"\n                         tabindex=\"-1\"\n                         draggable=\"true\"\n                         @dragstart.stop=\"resizeStart($event, item, direction)\">\n                    </div>\n\n                    <div v-for=\"direction in ['e', 'f', 'g', 'h']\"\n                         :key=\"direction\"\n                         :class=\"direction\"\n                         class=\"resizable-point\">\n                    </div>\n\n                    <div v-for=\"direction in ['i', 'j', 'k', 'l']\"\n                         :key=\"direction\"\n                         :class=\"direction\"\n                         class=\"resizable-line\"\n                         tabindex=\"-1\"\n                         draggable=\"true\"\n                         @dragstart.stop=\"resizeStart($event, item, direction)\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport { ref, computed, onMounted, onBeforeUnmount, defineComponent, PropType } from 'vue'\n\ninterface ChartItem {\n    id: number | string\n    width: number\n    height: number\n    x: number\n    y: number\n}\n\ninterface Position {\n    x: number\n    y: number\n}\n\ninterface Style {\n    [name: string]: any\n}\n\nexport default defineComponent({\n    name : 'draggable-panel',\n    props: {\n        width         : {\n            required: true,\n            type    : Number as PropType<number>,\n        },\n        height        : {\n            required: true,\n            type    : Number as PropType<number>,\n        },\n        data          : {\n            required: true,\n            type    : Array as PropType<ChartItem[]>,\n        },\n        chartMinWidth : {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 100,\n        },\n        chartMinHeight: {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 100,\n        },\n        padding       : {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 32,\n        },\n        lock          : {\n            required: false,\n            type    : Boolean as PropType<boolean>,\n            default : false,\n        },\n        canvasStyle   : {\n            required: false,\n            type    : Object as PropType<Style>,\n            default : {},\n        },\n        chartStyle    : {\n            required: false,\n            type    : Object as PropType<Style>,\n            default : {},\n        },\n        scaleMin      : {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 0.5,\n        },\n        scaleMax      : {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 10,\n        },\n    },\n    setup (props) {\n        const container         = ref<HTMLElement | null>(null)\n        const canvas            = ref<HTMLElement | null>(null)\n        const canvasStatusMove  = ref<boolean>(false)\n        const pointerPressed    = ref<boolean>(false)\n        const outCanvasDragover = ref<boolean>(false)\n        const defaultScale      = ref<number>(1)\n        const scale             = ref<number>(1)\n        const defaultX          = ref<number>(0)\n        const defaultY          = ref<number>(0)\n        const canvasX           = ref<number>(0)\n        const canvasY           = ref<number>(0)\n        const resizeDirection   = ref<string>('')\n        const movingChart       = ref<ChartItem | null>(null)\n        const resizingChart     = ref<ChartItem | null>(null)\n        const diff              = ref<Position>({ x: 0, y: 0 })\n        const point             = ref<Position>({ x: 0, y: 0 })\n        const lastPointermove   = ref<Position>({ x: 0, y: 0 })\n        const chartPosition     = ref<Position>({ x: 0, y: 0 })\n\n        const canvasStyleComputed = computed(() => ({\n            ...props.canvasStyle,\n            ...{\n                'width'    : props.width + 'px',\n                'height'   : props.height + 'px',\n                'transform': [\n                    // translate3d better than translate\n                    `translate3d(${canvasX.value}px, ${canvasY.value}px, 0)`,\n                    `scale(${scale.value})`,\n                ].join(' '),\n            },\n        }))\n\n        const chartStyleComputed = computed(() => {\n            return (chartItem: ChartItem, index: number) => {\n                const { width, height, x, y } = chartItem\n                return {\n                    ...props.chartStyle,\n                    ...{\n                        // translate better than translate3d\n                        // translate3d causes blurry content\n                        'width'    : width + 'px',\n                        'height'   : height + 'px',\n                        'transform': `translateX(${x}px) translateY(${y}px)`,\n                        'z-index'  : 100 + index,\n                    },\n                }\n            }\n        })\n\n        /**\n         * Canvas init\n         */\n        function init () {\n            const { offsetWidth, offsetHeight } = container.value as HTMLElement\n            const defaultMaxWidth               = offsetWidth - props.padding\n            const defaultMaxHeight              = offsetHeight - props.padding\n            const ratioContainer                = offsetWidth / offsetHeight\n            const ratioCanvas                   = props.width / props.height\n\n            defaultScale.value = ratioContainer < ratioCanvas\n                ? defaultMaxWidth / props.width\n                : defaultMaxHeight / props.height\n            defaultX.value     = (offsetWidth - props.width) / 2\n            defaultY.value     = (offsetHeight - props.height) / 2\n            scale.value        = defaultScale.value\n            canvasX.value      = defaultX.value\n            canvasY.value      = defaultY.value\n        }\n\n        onMounted(() => {\n            init()\n            window.addEventListener('resize', init)\n        })\n\n        onBeforeUnmount(() => {\n            window.removeEventListener('resize', init)\n        })\n\n        return {\n            container,              // Element Container\n            canvas,                 // Element Canvas\n            defaultX,               // Canvas default X\n            defaultY,               // Canvas default Y\n            defaultScale,           // Canvas default scale\n            scale,                  // Canvas scale value\n            point,                  // Canvas move start position\n            lastPointermove,        // Canvas move position\n            diff,                   // Canvas move position diff\n            movingChart,            // Chart in moving state\n            resizingChart,          // Chart in resizing state\n            resizeDirection,        // Chart resize direction\n            chartPosition,          // Chart drag position\n            canvasX,                // Canvas translateX\n            canvasY,                // Canvas translateY\n            canvasStatusMove,       // Keyboard Space press state\n            pointerPressed,         // Pointer press state\n            outCanvasDragover,      // Drag off-canvas el into the canvas\n            canvasStyleComputed,    // Canvas style\n            chartStyleComputed,     // Chart style\n        }\n    },\n    watch  : {\n        scale (newVal) {\n            this.$emit('canvas-scale', newVal)\n        },\n    },\n    methods: {\n        /**\n         * Scale canvas by wheel\n         * @param event\n         */\n        scaleByWheel (event: WheelEvent) {\n            if (this.lock) return\n\n            let ratio = 1 / (1 + event.deltaY * 0.001)\n            let scale = this.scale * ratio\n\n            if (scale > this.scaleMax) {\n                ratio = this.scaleMax / this.scale\n                scale = this.scaleMax\n            }\n\n            if (scale < this.scaleMin) {\n                ratio = this.scaleMin / this.scale\n                scale = this.scaleMin\n            }\n\n            this.scale = scale\n\n            const origin = {\n                x: (ratio - 1) * this.width * 0.5,\n                y: (ratio - 1) * this.height * 0.5,\n            }\n\n            this.canvasX -= (ratio - 1) * (event.clientX - this.canvasX) - origin.x\n            this.canvasY -= (ratio - 1) * (event.clientY - this.canvasY) - origin.y\n        },\n        /**\n         * Scale canvas by ctrl ++ / ctrl --\n         * Scale canvas by command ++ / command --\n         * @param event\n         */\n        scaleByKeyboard (event: KeyboardEvent) {\n            const { key } = event\n\n            if (['=', '-'].includes(key) && this.lock) return event.preventDefault()\n\n            if (key === '=') {\n                event.preventDefault()\n\n                let scale = this.scale + 0.1\n\n                if (scale > this.scaleMax) scale = this.scaleMax\n\n                this.scale = scale\n            }\n\n            if (key === '-') {\n                event.preventDefault()\n\n                let scale = this.scale - 0.1\n\n                if (scale < this.scaleMin) scale = this.scaleMin\n\n                this.scale = scale\n            }\n        },\n        /**\n         * Reset scale\n         */\n        resetScale () {\n            if (this.lock) return\n\n            this.scale   = this.defaultScale\n            this.canvasX = this.defaultX\n            this.canvasY = this.defaultY\n        },\n        /**\n         * Real scale\n         */\n        realScale () {\n            if (this.lock) return\n\n            const { offsetWidth, offsetHeight } = this.container\n\n            this.scale   = 1\n            this.canvasX = (offsetWidth - this.width) / 2\n            this.canvasY = (offsetHeight - this.height) / 2\n        },\n        /**\n         * Set chart position\n         * @param event\n         */\n        setChartPosition (event: MouseEvent) {\n            this.chartPosition = {\n                x: event.clientX,\n                y: event.clientY,\n            }\n        },\n        /**\n         * Dragover over container (move/resize)\n         * @param event\n         */\n        dragoverContainer (event: DragEvent) {\n            const { clientX, clientY } = event\n            const offsetX              = (clientX - this.chartPosition.x) / this.scale\n            const offsetY              = (clientY - this.chartPosition.y) / this.scale\n\n            this.chartPosition = { x: clientX, y: clientY }\n\n            if (this.movingChart) {\n                const { width, height, x, y } = this.movingChart\n                const maxX                    = this.width - width\n                const maxY                    = this.height - height\n\n                let newX = x + offsetX\n                let newY = y + offsetY\n\n                if (newX < 0) newX = 0\n                if (newY < 0) newY = 0\n                if (newX > maxX) newX = maxX\n                if (newY > maxY) newY = maxY\n\n                this.movingChart.x = newX\n                this.movingChart.y = newY\n            }\n\n            if (this.resizingChart) {\n                const { width, height, x, y } = this.resizingChart\n                const chartMaxWidth           = this.width - x\n                const chartMaxHeight          = this.height - y\n\n                let newWidth  = width\n                let newHeight = height\n                let newX      = x\n                let newY      = y\n\n                const resizeWidth       = () => {\n                    newWidth += offsetX\n                    if (newWidth < this.chartMinWidth) newWidth = width\n                    if (newWidth > chartMaxWidth) newWidth = chartMaxWidth\n                }\n                const resizeHeight      = () => {\n                    newHeight += offsetY\n                    if (newHeight < this.chartMinHeight) newHeight = height\n                    if (newHeight > chartMaxHeight) newHeight = chartMaxHeight\n                }\n                const resizeWidthWithX  = () => {\n                    newX     = x + offsetX\n                    newWidth = width - offsetX\n\n                    if (newX < 0) {\n                        newX     = 0\n                        newWidth = width + x\n                    }\n\n                    if (newWidth < this.chartMinWidth) {\n                        newWidth = width\n                        newX     = x\n                    }\n                }\n                const resizeHeightWithY = () => {\n                    newY      = y + offsetY\n                    newHeight = height - offsetY\n\n                    if (newY < 0) {\n                        newY      = 0\n                        newHeight = height + y\n                    }\n\n                    if (newHeight < this.chartMinHeight) {\n                        newHeight = height\n                        newY      = y\n                    }\n                }\n\n                if (this.resizeDirection === 'a') {\n                    resizeWidthWithX()\n                    resizeHeightWithY()\n                }\n\n                if (this.resizeDirection === 'b') {\n                    resizeWidth()\n                    resizeHeightWithY()\n                }\n\n                if (this.resizeDirection === 'c') {\n                    resizeWidth()\n                    resizeHeight()\n                }\n\n                if (this.resizeDirection === 'd') {\n                    resizeWidthWithX()\n                    resizeHeight()\n                }\n\n                if (this.resizeDirection === 'i') resizeHeightWithY()\n                if (this.resizeDirection === 'j') resizeWidth()\n                if (this.resizeDirection === 'k') resizeHeight()\n                if (this.resizeDirection === 'l') resizeWidthWithX()\n\n                this.resizingChart.width  = newWidth\n                this.resizingChart.x      = newX\n                this.resizingChart.height = newHeight\n                this.resizingChart.y      = newY\n            }\n        },\n        /**\n         * Chart move/resize start\n         * @param event\n         * @param chart\n         */\n        chartDragstart (event: DragEvent, chart: ChartItem) {\n            if (!event.dataTransfer) return\n\n            const empty = document.createElement('div')\n            event.dataTransfer.setDragImage(empty, 0, 0)\n            event.dataTransfer.effectAllowed = 'move'\n            event.dataTransfer.dropEffect    = 'move'\n\n            this.movingChart = chart\n        },\n        /**\n         * Chart move/resize end\n         */\n        chartDragend () {\n            this.movingChart   = null\n            this.resizingChart = null\n        },\n        /**\n         * Resize start\n         * @param event\n         * @param chart\n         * @param direction\n         */\n        resizeStart (event: DragEvent, chart: ChartItem, direction: string) {\n            if (!event.dataTransfer) return\n\n            const empty = document.createElement('div')\n            event.dataTransfer.setDragImage(empty, 0, 0)\n            event.dataTransfer.dropEffect    = 'move'\n            event.dataTransfer.effectAllowed = 'move'\n\n            this.resizingChart   = chart\n            this.resizeDirection = direction\n        },\n        /**\n         * Pointer down\n         * @param event\n         */\n        pointerDown (event: PointerEvent) {\n            if (!this.canvasStatusMove || this.lock) return\n\n            this.pointerPressed = true\n\n            const canvasEl = this.canvas!\n\n            canvasEl.setPointerCapture(event.pointerId)\n\n            this.point           = { x: event.clientX, y: event.clientY }\n            this.lastPointermove = { x: event.clientX, y: event.clientY }\n        },\n        /**\n         * Pointer move\n         * @param event\n         */\n        pointermove (event: PointerEvent) {\n            if (!this.pointerPressed) return\n\n            event.preventDefault()\n\n            const current = { x: event.clientX, y: event.clientY }\n\n            this.diff.x          = current.x - this.lastPointermove.x\n            this.diff.y          = current.y - this.lastPointermove.y\n            this.lastPointermove = { x: current.x, y: current.y }\n            this.canvasX += this.diff.x\n            this.canvasY += this.diff.y\n        },\n        /**\n         * Pointer up\n         */\n        pointerUp () {\n            this.pointerPressed = false\n        },\n        /**\n         * Pointer cancel\n         */\n        pointerCancel () {\n            this.pointerPressed = false\n        },\n        dragenterCanvas () {\n            if (this.movingChart || this.resizingChart) return\n\n            this.outCanvasDragover = true\n        },\n        dragleaveCanvas () {\n            this.outCanvasDragover = false\n        },\n        /**\n         * Drop in canvas\n         * @param event\n         */\n        dropInCanvas (event: DragEvent) {\n            if (this.movingChart || this.resizingChart) return\n\n            this.outCanvasDragover = false\n\n            this.$emit('canvas-drop', event.offsetX, event.offsetY)\n        },\n    },\n})\n</script>\n\n<style lang=\"sass\" scoped>\n@import \"index\"\n</style>\n"],"names":["defineComponent","ref","computed","onMounted","onBeforeUnmount","_createElementBlock","_normalizeClass","_withKeys","_withModifiers","_createElementVNode","_normalizeStyle","_openBlock","_Fragment","_renderList","_renderSlot"],"mappings":";KACA,EAAe,CAAC,EAAK,IAAU,CAC7B,KAAM,GAAS,EAAI,WAAa,EAChC,SAAW,CAAC,EAAK,IAAQ,GACvB,EAAO,GAAO,EAEhB,MAAO,EACT,EC6FA,KAAK,GAAaA,EAAAA,gBAAa,CAC3B,KAAO,kBACP,MAAO,CACH,MAAgB,CACZ,SAAU,GACV,KAAU,MACd,EACA,OAAgB,CACZ,SAAU,GACV,KAAU,MACd,EACA,KAAgB,CACZ,SAAU,GACV,KAAU,KACd,EACA,cAAgB,CACZ,SAAU,GACV,KAAU,OACV,QAAU,GACd,EACA,eAAgB,CACZ,SAAU,GACV,KAAU,OACV,QAAU,GACd,EACA,QAAgB,CACZ,SAAU,GACV,KAAU,OACV,QAAU,EACd,EACA,KAAgB,CACZ,SAAU,GACV,KAAU,QACV,QAAU,EACd,EACA,YAAgB,CACZ,SAAU,GACV,KAAU,OACV,QAAU,CAAC,CACf,EACA,WAAgB,CACZ,SAAU,GACV,KAAU,OACV,QAAU,CAAC,CACf,EACA,SAAgB,CACZ,SAAU,GACV,KAAU,OACV,QAAU,EACd,EACA,SAAgB,CACZ,SAAU,GACV,KAAU,OACV,QAAU,EACd,CACJ,EACA,MAAO,EAAO,CACJ,KAAA,GAAoBC,MAAwB,IAAI,EAChD,EAAoBA,MAAwB,IAAI,EAChD,EAAoBA,MAAa,EAAK,EACtC,EAAoBA,MAAa,EAAK,EACtC,EAAoBA,MAAa,EAAK,EACtC,EAAoBA,MAAY,CAAC,EACjC,EAAoBA,MAAY,CAAC,EACjC,EAAoBA,MAAY,CAAC,EACjC,EAAoBA,MAAY,CAAC,EACjC,EAAoBA,MAAY,CAAC,EACjC,EAAoBA,MAAY,CAAC,EACjC,EAAoBA,MAAY,EAAE,EAClC,EAAoBA,MAAsB,IAAI,EAC9C,EAAoBA,MAAsB,IAAI,EAC9C,EAAoBA,EAAAA,IAAc,CAAE,EAAG,EAAG,EAAG,EAAG,EAChD,EAAoBA,EAAAA,IAAc,CAAE,EAAG,EAAG,EAAG,EAAG,EAChD,EAAoBA,EAAAA,IAAc,CAAE,EAAG,EAAG,EAAG,EAAG,EAChD,EAAoBA,EAAAA,IAAc,CAAE,EAAG,EAAG,EAAG,EAAG,EAEhD,EAAsBC,EAAAA,SAAS,IAAO,OACrC,EAAM,aAD+B,CAGpC,MAAa,EAAM,MAAQ,KAC3B,OAAa,EAAM,OAAS,KAC5B,UAAa,CAET,eAAe,EAAQ,YAAY,EAAQ,cAC3C,SAAS,EAAM,QAAA,EACjB,KAAK,GAAG,CAEhB,EAAA,EAEI,EAAqBA,EAAAA,SAAS,IACzB,CAAC,EAAsB,IAAkB,CAC5C,KAAM,CAAE,QAAO,SAAQ,IAAG,KAAM,EACzB,MAAA,QACA,EAAM,YADN,CAKC,MAAa,EAAQ,KACrB,OAAa,EAAS,KACtB,UAAa,cAAc,mBAAmB,OAC9C,UAAa,IAAM,CACvB,EACJ,CAEP,EAKgB,YAAA,CACP,KAAA,CAAE,cAAa,gBAAiB,EAAU,MAC1C,EAAgC,EAAc,EAAM,QACpD,EAAgC,EAAe,EAAM,QACrD,EAAgC,EAAc,EAC9C,EAAgC,EAAM,MAAQ,EAAM,OAE1D,EAAa,MAAQ,EAAiB,EAChC,EAAkB,EAAM,MACxB,EAAmB,EAAM,OACtB,EAAA,MAA2B,GAAA,EAAM,OAAS,EAC1C,EAAA,MAA4B,GAAA,EAAM,QAAU,EACrD,EAAM,MAAe,EAAa,MAClC,EAAQ,MAAa,EAAS,MAC9B,EAAQ,MAAa,EAAS,KAClC,CAEAC,SAAAA,UAAU,IAAM,CACP,IACE,OAAA,iBAAiB,SAAU,CAAI,CAAA,CACzC,EAEDC,EAAAA,gBAAgB,IAAM,CACX,OAAA,oBAAoB,SAAU,CAAI,CAAA,CAC5C,EAEM,CACH,YACA,SACA,WACA,WACA,eACA,QACA,QACA,kBACA,OACA,cACA,gBACA,kBACA,gBACA,UACA,UACA,mBACA,iBACA,oBACA,sBACA,oBAAA,CAER,EACA,MAAS,CACL,MAAO,EAAQ,CACN,KAAA,MAAM,eAAgB,CAAM,CACrC,CACJ,EACA,QAAS,CAKL,aAAc,EAAmB,CAC7B,GAAI,KAAK,KAAM,OAEf,GAAI,GAAQ,EAAS,GAAA,EAAM,OAAS,MAChC,EAAQ,KAAK,MAAQ,EAErB,AAAA,EAAQ,KAAK,UACL,GAAA,KAAK,SAAW,KAAK,MAC7B,EAAQ,KAAK,UAGb,EAAQ,KAAK,UACL,GAAA,KAAK,SAAW,KAAK,MAC7B,EAAQ,KAAK,UAGjB,KAAK,MAAQ,EAEb,KAAM,GAAS,CACX,EAAI,GAAQ,GAAK,KAAK,MAAQ,GAC9B,EAAI,GAAQ,GAAK,KAAK,OAAS,EAAA,EAGnC,KAAK,SAAoB,GAAA,MAAY,QAAU,KAAK,SAAW,EAAO,EACtE,KAAK,SAAoB,GAAA,MAAY,QAAU,KAAK,SAAW,EAAO,CAC1E,EAMA,gBAAiB,EAAsB,CACnC,KAAM,CAAE,OAAQ,EAEhB,GAAI,CAAC,IAAK,GAAG,EAAE,SAAS,CAAG,GAAK,KAAK,KAAM,MAAO,GAAM,iBAExD,GAAI,IAAQ,IAAK,CACb,EAAM,eAAe,EAEjB,GAAA,GAAQ,KAAK,MAAQ,GAEzB,AAAI,EAAQ,KAAK,UAAU,GAAQ,KAAK,UAExC,KAAK,MAAQ,CACjB,CAEA,GAAI,IAAQ,IAAK,CACb,EAAM,eAAe,EAEjB,GAAA,GAAQ,KAAK,MAAQ,GAEzB,AAAI,EAAQ,KAAK,UAAU,GAAQ,KAAK,UAExC,KAAK,MAAQ,CACjB,CACJ,EAIA,YAAc,CACV,AAAI,KAAK,MAET,MAAK,MAAU,KAAK,aACpB,KAAK,QAAU,KAAK,SACpB,KAAK,QAAU,KAAK,SACxB,EAIA,WAAa,CACT,GAAI,KAAK,KAAM,OAET,KAAA,CAAE,cAAa,gBAAiB,KAAK,UAE3C,KAAK,MAAU,EACV,KAAA,QAAyB,GAAA,KAAK,OAAS,EACvC,KAAA,QAA0B,GAAA,KAAK,QAAU,CAClD,EAKA,iBAAkB,EAAmB,CACjC,KAAK,cAAgB,CACjB,EAAG,EAAM,QACT,EAAG,EAAM,OAAA,CAEjB,EAKA,kBAAmB,EAAkB,CAC3B,KAAA,CAAE,UAAS,WAAY,EACvB,EAAwB,GAAU,KAAK,cAAc,GAAK,KAAK,MAC/D,EAAwB,GAAU,KAAK,cAAc,GAAK,KAAK,MAIrE,GAFA,KAAK,cAAgB,CAAE,EAAG,EAAS,EAAG,GAElC,KAAK,YAAa,CAClB,KAAM,CAAE,QAAO,SAAQ,IAAG,KAAM,KAAK,YAC/B,EAA0B,KAAK,MAAQ,EACvC,EAA0B,KAAK,OAAS,EAE9C,GAAI,GAAO,EAAI,EACX,EAAO,EAAI,EAEf,AAAI,EAAO,GAAU,GAAA,GACjB,EAAO,GAAU,GAAA,GACjB,EAAO,GAAa,GAAA,GACpB,EAAO,GAAa,GAAA,GAExB,KAAK,YAAY,EAAI,EACrB,KAAK,YAAY,EAAI,CACzB,CAEA,GAAI,KAAK,cAAe,CACpB,KAAM,CAAE,QAAO,SAAQ,IAAG,KAAM,KAAK,cAC/B,EAA0B,KAAK,MAAQ,EACvC,EAA0B,KAAK,OAAS,EAE9C,GAAI,GAAY,EACZ,EAAY,EACZ,EAAY,EACZ,EAAY,EAEhB,KAAM,GAAoB,IAAM,CAChB,GAAA,EACR,EAAW,KAAK,eAA0B,GAAA,GAC1C,EAAW,GAA0B,GAAA,EAAA,EAEvC,EAAoB,IAAM,CACf,GAAA,EACT,EAAY,KAAK,gBAA4B,GAAA,GAC7C,EAAY,GAA4B,GAAA,EAAA,EAE1C,EAAoB,IAAM,CAC5B,EAAW,EAAI,EACf,EAAW,EAAQ,EAEf,EAAO,GACI,GAAA,EACX,EAAW,EAAQ,GAGnB,EAAW,KAAK,eACL,GAAA,EACA,EAAA,EACf,EAEE,EAAoB,IAAM,CAC5B,EAAY,EAAI,EAChB,EAAY,EAAS,EAEjB,EAAO,GACK,GAAA,EACZ,EAAY,EAAS,GAGrB,EAAY,KAAK,gBACL,GAAA,EACA,EAAA,EAChB,EAGA,AAAA,KAAK,kBAAoB,KACR,KACC,KAGlB,KAAK,kBAAoB,KACb,KACM,KAGlB,KAAK,kBAAoB,KACb,KACC,KAGb,KAAK,kBAAoB,KACR,KACJ,KAGb,KAAK,kBAAoB,KAAuB,IAChD,KAAK,kBAAoB,KAAiB,IAC1C,KAAK,kBAAoB,KAAkB,IAC3C,KAAK,kBAAoB,KAAsB,IAEnD,KAAK,cAAc,MAAS,EAC5B,KAAK,cAAc,EAAS,EAC5B,KAAK,cAAc,OAAS,EAC5B,KAAK,cAAc,EAAS,CAChC,CACJ,EAMA,eAAgB,EAAkB,EAAkB,CAChD,GAAI,CAAC,EAAM,aAAc,OAEnB,KAAA,GAAQ,SAAS,cAAc,KAAK,EAC1C,EAAM,aAAa,aAAa,EAAO,EAAG,CAAC,EAC3C,EAAM,aAAa,cAAgB,OACnC,EAAM,aAAa,WAAgB,OAEnC,KAAK,YAAc,CACvB,EAIA,cAAgB,CACZ,KAAK,YAAgB,KACrB,KAAK,cAAgB,IACzB,EAOA,YAAa,EAAkB,EAAkB,EAAmB,CAChE,GAAI,CAAC,EAAM,aAAc,OAEnB,KAAA,GAAQ,SAAS,cAAc,KAAK,EAC1C,EAAM,aAAa,aAAa,EAAO,EAAG,CAAC,EAC3C,EAAM,aAAa,WAAgB,OACnC,EAAM,aAAa,cAAgB,OAEnC,KAAK,cAAkB,EACvB,KAAK,gBAAkB,CAC3B,EAKA,YAAa,EAAqB,CAC1B,GAAA,CAAC,KAAK,kBAAoB,KAAK,KAAM,OAEzC,KAAK,eAAiB,GAIb,AAFQ,KAAK,OAEb,kBAAkB,EAAM,SAAS,EAE1C,KAAK,MAAkB,CAAE,EAAG,EAAM,QAAS,EAAG,EAAM,SACpD,KAAK,gBAAkB,CAAE,EAAG,EAAM,QAAS,EAAG,EAAM,QACxD,EAKA,YAAa,EAAqB,CAC9B,GAAI,CAAC,KAAK,eAAgB,OAE1B,EAAM,eAAe,EAErB,KAAM,GAAU,CAAE,EAAG,EAAM,QAAS,EAAG,EAAM,SAE7C,KAAK,KAAK,EAAa,EAAQ,EAAI,KAAK,gBAAgB,EACxD,KAAK,KAAK,EAAa,EAAQ,EAAI,KAAK,gBAAgB,EACxD,KAAK,gBAAkB,CAAE,EAAG,EAAQ,EAAG,EAAG,EAAQ,GAC7C,KAAA,SAAW,KAAK,KAAK,EACrB,KAAA,SAAW,KAAK,KAAK,CAC9B,EAIA,WAAa,CACT,KAAK,eAAiB,EAC1B,EAIA,eAAiB,CACb,KAAK,eAAiB,EAC1B,EACA,iBAAmB,CACX,AAAA,KAAK,aAAe,KAAK,eAE7B,MAAK,kBAAoB,GAC7B,EACA,iBAAmB,CACf,KAAK,kBAAoB,EAC7B,EAKA,aAAc,EAAkB,CACxB,AAAA,KAAK,aAAe,KAAK,eAE7B,MAAK,kBAAoB,GAEzB,KAAK,MAAM,cAAe,EAAM,QAAS,EAAM,OAAO,EAC1D,CACJ,CACJ,CAAC,0CA3gBoB,EAAA,CAAA,MAAM,WAKN,EAAA,CAAA,MAAM,8FAjDvBC,EA4EM,mBAAA,MAAA,CA5ED,MAAKC,EAAAA,gBAAC,kBAAiB,CACQ,KAAA,EAAA,IAAA,CAAA,CAAA,EAG9B,SAAU,GACX,IAAI,YACJ,UAAA,GACC,UAAO,CAAA,EAAA,IAAA,GAAA,GAAAC,EAAA,SAAA,AAAA,GAAQ,EAAgB,iBAAA,GAAA,CAAA,OAAA,CAAA,GAAA,EAAA,KAAA,GAAA,IAAAC,EAAAA,cAAA,IAAA,IACjB,EAAe,iBAAA,EAAA,gBAAA,GAAA,CAAA,EAAA,CAAA,MAAA,CAAA,GAAA,EAAA,KAAA,GAAA,IAAAA,EAAAA,cAAA,IAAA,IACf,EAAe,iBAAA,EAAA,gBAAA,GAAA,CAAA,EAAA,CAAA,MAAA,CAAA,GAAA,EAAA,KAAA,GAAA,IAAAD,WAAAC,EAAAA,cAAA,IAAA,IAEV,EAAU,YAAA,EAAA,WAAA,GAAA,CAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CAAA,GAAA,CAAA,GAAA,EAAA,KAAA,GAAA,IAAAD,WAAAC,EAAAA,cAAA,IAAA,IACN,EAAS,WAAA,EAAA,UAAA,GAAA,CAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CAAA,OAAA,CAAA,EAAA,EAFhC,QAAK,4BAAQ,EAAgB,iBAAA,GAAA,CAAA,OAAA,CAAA,GAG7B,QAAK,CAAA,EAAA,KAAA,GAAA,IAAAA,EAAA,cAAA,IAAA,IAAe,EAAY,cAAA,EAAA,aAAA,GAAA,CAAA,EAAA,CAAA,UAAA,MAAA,CAAA,GAAA,EAAA,KAAA,GAAA,IAAAA,EAAA,cAAA,IAAA,IACZ,EAAY,cAAA,EAAA,aAAA,GAAA,CAAA,EAAA,CAAA,UAAA,MAAA,CAAA,EAAA,EAChC,WAAQ,sCAAU,EAAiB,mBAAA,EAAA,kBAAA,GAAA,CAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,CACrCC,EAAAA,mBA2DM,MAAA,CA3DD,MAAKH,EAAAA,gBAAC,SAAQ,CAEoC,sBAAA,EAAA,kBAA8C,OAAA,EAAA,gBAAA,CAAA,CAAA,EADhG,IAAI,SAKH,MAAKI,EAAAA,eAAE,EAAmB,mBAAA,EAC1B,cAAW,EAAE,IAAA,GAAA,GAAA,IAAA,IAAA,EAAA,aAAA,EAAA,YAAA,GAAA,CAAA,GACb,cAAW,EAAE,IAAA,GAAA,GAAA,IAAA,IAAA,EAAA,aAAA,EAAA,YAAA,GAAA,CAAA,GACb,YAAS,EAAE,IAAA,GAAA,GAAA,IAAA,IAAA,EAAA,WAAA,EAAA,UAAA,GAAA,CAAA,GACX,gBAAa,EAAE,IAAA,GAAA,GAAA,IAAA,IAAA,EAAA,eAAA,EAAA,cAAA,GAAA,CAAA,GACf,YAAS,EAAE,IAAA,GAAA,GAAA,IAAA,IAAA,EAAA,iBAAA,EAAA,gBAAA,GAAA,CAAA,GACX,YAAS,EAAE,IAAA,GAAA,GAAA,IAAA,IAAA,EAAA,iBAAA,EAAA,gBAAA,GAAA,CAAA,GACX,OAAI,EAAE,IAAA,GAAA,GAAA,IAAA,IAAA,EAAA,cAAA,EAAA,aAAA,GAAA,CAAA,EAAA,EAAA,CACRC,GAAAA,UAAA,EAAA,EAAAN,EAAA,mBA4CMO,WAvCuB,KAAAC,EAAA,WAAA,EAAA,KAAI,CAApB,EAAM,IAAK,8BALxBR,EA4CM,mBAAA,MAAA,CA5CD,MAAKC,EAAAA,gBAAC,aAAY,CACyB,OAAA,MAAA,cAAA,cAAa,MAAS,EAAK,GAAqC,SAAA,MAAA,gBAAA,cAAe,MAAO,EAAK,EAAA,CAAA,CAAA,EAKrI,IAAK,EAAK,GACV,MAAKI,EAAA,eAAE,EAAmB,mBAAA,EAAM,CAAK,CAAA,EACrC,UAAS,EAAK,GACf,SAAS,KACR,UAAS,CAAG,EAAA,KACZ,YAAS,EAAE,IAAA,GAAA,GAAA,IAAA,IAAA,EAAA,kBAAA,EAAA,iBAAA,GAAA,CAAA,GACX,YAAS,AAAA,GAAE,EAAe,eAAA,EAAQ,CAAI,EACtC,UAAO,EAAE,IAAA,GAAA,GAAA,IAAA,IAAA,EAAA,cAAA,EAAA,aAAA,GAAA,CAAA,EAAA,EAAA,CACXD,EAAA,mBAIM,MAJN,EAIM,CAHFK,EAAAA,WAEO,EAFiB,OAAA,SAAA,EAAK,GAAE,CAAG,MAAO,EAAO,OAAA,EAAhD,IAEO,CADHA,aAAiD,EAAA,OAAA,QAAA,CAA7B,MAAO,EAAO,OAAA,EAAA,OAAA,EAAA,SAG1CL,EAAA,mBAwBM,MAxBN,EAwBM,CAAAE,GAAAA,YAvBFN,EAAAA,mBAOMO,EAAA,SAAA,KAAAC,EAAA,WAPmB,CAAoB,IAAA,IAAA,IAAA,GAAA,EAAA,AAAjC,GAAZJ,EAAAA,mBAOM,MAAA,CANA,IAAK,EACN,MAAKH,EAAC,eAAA,CAAA,kBACE,CAAS,CAAA,EACjB,SAAS,KACT,UAAU,OACT,YAASE,EAAA,cAAA,AAAA,GAAO,EAAY,YAAA,EAAQ,EAAM,CAAS,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,KAAA,GAAA,CAAA,uBAGzDH,EAAAA,mBAIMO,EAAA,SAAA,KAAAC,EAAA,WAJmB,CAAoB,IAAA,IAAA,IAAA,GAAA,EAAA,AAAjC,GAAZJ,EAAAA,mBAIM,MAAA,CAHA,IAAK,EACL,MAAKH,EAAE,eAAA,CAAA,EACF,iBAAiB,CAAA,CAAA,EAAA,KAAA,CAAA,uBAG5BD,EAAAA,mBAOMO,EAAA,SAAA,KAAAC,EAAA,WAPmB,CAAoB,IAAA,IAAA,IAAA,GAAA,EAAA,AAAjC,GAAZJ,EAAAA,mBAOM,MAAA,CANA,IAAK,EACL,MAAKH,EAAE,eAAA,CAAA,EACF,gBAAgB,CAAA,EACtB,SAAS,KACT,UAAU,OACT,YAASE,EAAA,cAAA,AAAA,GAAO,EAAY,YAAA,EAAQ,EAAM,CAAS,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,KAAA,GAAA,CAAA"}