{"version":3,"file":"draggable-panel.umd.js","sources":["../src/components/draggablePanel/index.ts"],"sourcesContent":["import {\n    markRaw,\n    defineComponent,\n    PropType,\n    ref,\n    computed,\n    watch,\n    h,\n    onMounted,\n    onBeforeUnmount,\n}\n    from 'vue'\n\nimport {\n    ChartItem,\n    Position,\n    Style,\n} from '../../../types/draggable-panel'\nimport './index.sass'\n\nexport default markRaw(defineComponent({\n    name : 'draggable-panel',\n    props: {\n        width         : {\n            required: true,\n            type    : Number as PropType<number>,\n        },\n        height        : {\n            required: true,\n            type    : Number as PropType<number>,\n        },\n        data          : {\n            required: true,\n            type    : Array as PropType<ChartItem[]>,\n        },\n        chartMinWidth : {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 100,\n        },\n        chartMinHeight: {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 100,\n        },\n        padding       : {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 32,\n        },\n        lock          : {\n            required: false,\n            type    : Boolean as PropType<boolean>,\n            default : false,\n        },\n        canvasStyle   : {\n            required: false,\n            type    : Object as PropType<Style>,\n            default : {},\n        },\n        chartStyle    : {\n            required: false,\n            type    : Object as PropType<Style>,\n            default : {},\n        },\n        scaleMin      : {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 0.5,\n        },\n        scaleMax      : {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 10,\n        },\n        chartId       : {\n            required: false,\n            type    : Number as PropType<number>,\n            default : 0,\n        },\n    },\n    emits: [\n        'canvas-scale',\n        'canvas-drop',\n        'chart-move',\n        'chart-scale',\n    ],\n    setup (props, ctx) {\n        const container         = ref<HTMLElement | null>(null)\n        const canvas            = ref<HTMLElement | null>(null)\n        const canvasStatusMove  = ref<boolean>(false)\n        const pointerPressed    = ref<boolean>(false)\n        const outCanvasDragover = ref<boolean>(false)\n        const defaultScale      = ref<number>(1)\n        const scale             = ref<number>(1)\n        const defaultX          = ref<number>(0)\n        const defaultY          = ref<number>(0)\n        const canvasX           = ref<number>(0)\n        const canvasY           = ref<number>(0)\n        const resizeDirection   = ref<string>('')\n        const movingChart       = ref<ChartItem | null>(null)\n        const resizingChart     = ref<ChartItem | null>(null)\n        const originalChart     = ref<ChartItem | null>(null)\n        const diff              = ref<Position>({ x: 0, y: 0 })\n        const point             = ref<Position>({ x: 0, y: 0 })\n        const lastPointermove   = ref<Position>({ x: 0, y: 0 })\n        const chartPosition     = ref<Position>({ x: 0, y: 0 })\n        const dragend           = ref<boolean>(false)\n\n        let selectedChart = ref<number>(0)\n\n        const canvasStyleComputed = computed(() => ({\n            ...props.canvasStyle,\n            ...{\n                'width'    : props.width + 'px',\n                'height'   : props.height + 'px',\n                'transform': [\n                    // translate3d better than translate\n                    `translate3d(${canvasX.value}px, ${canvasY.value}px, 0)`,\n                    `scale(${scale.value})`,\n                ].join(' '),\n            },\n        }))\n        const chartStyleComputed  = computed(() => {\n            return (chartItem: ChartItem, index: number) => {\n                const { width, height, x, y } = chartItem\n                return {\n                    ...props.chartStyle,\n                    ...{\n                        // translate better than translate3d\n                        // translate3d causes blurry content\n                        'width'    : width + 'px',\n                        'height'   : height + 'px',\n                        'transform': `translateX(${x}px) translateY(${y}px)`,\n                        'z-index'  : 100 + index,\n                    },\n                }\n            }\n        })\n        const pointStyleComputed  = computed(() => {\n            return (chartItem: ChartItem) => {\n                const { width, height } = chartItem\n                const display           = (selectedChart.value === chartItem.id && !props.lock) ? 'block' : 'none'\n                return {\n                    ...{\n                        'width' : width + 'px',\n                        'height': height + 'px',\n                        display,\n                    },\n                }\n            }\n        })\n\n        watch(scale, newScale => ctx.emit('canvas-scale', newScale))\n\n        /**\n         * Scale canvas by wheel\n         * @param event\n         */\n        const scaleByWheel = (event: WheelEvent) => {\n            const { ctrlKey, metaKey } = event\n\n            if (!ctrlKey && !metaKey) return\n\n            event.preventDefault()\n\n            if (props.lock) return\n\n            let ratio = 1 / (1 + event.deltaY * 0.001)\n            let zoom  = scale.value * ratio\n\n            if (zoom > props.scaleMax) {\n                ratio = props.scaleMax / scale.value\n                zoom  = props.scaleMax\n            }\n\n            if (zoom < props.scaleMin) {\n                ratio = props.scaleMin / scale.value\n                zoom  = props.scaleMin\n            }\n\n            scale.value = zoom\n\n            const origin = {\n                x: (ratio - 1) * props.width * 0.5,\n                y: (ratio - 1) * props.height * 0.5,\n            }\n\n            canvasX.value -= (ratio - 1) * (event.clientX - canvasX.value) - origin.x\n            canvasY.value -= (ratio - 1) * (event.clientY - canvasY.value) - origin.y\n        }\n\n        /**\n         * Scale canvas add\n         * @param event\n         */\n        const scaleAddByKeyboard = (event: KeyboardEvent) => {\n            event.preventDefault()\n\n            if (props.lock) return\n\n            let zoom = scale.value + 0.1\n\n            if (zoom > props.scaleMax) zoom = props.scaleMax\n\n            scale.value = zoom\n        }\n\n        /**\n         * Scale canvas sub\n         * @param event\n         */\n        const scaleSubByKeyboard = (event: KeyboardEvent) => {\n            event.preventDefault()\n\n            if (props.lock) return\n\n            let zoom = scale.value - 0.1\n\n            if (zoom < props.scaleMin) zoom = props.scaleMin\n\n            scale.value = zoom\n        }\n\n        /**\n         * Reset scale\n         */\n        const resetScale = () => {\n            if (props.lock) return\n\n            scale.value   = defaultScale.value\n            canvasX.value = defaultX.value\n            canvasY.value = defaultY.value\n        }\n\n        /**\n         * Real scale\n         */\n        const realScale = () => {\n            if (props.lock) return\n\n            const { offsetWidth, offsetHeight } = container.value\n\n            scale.value   = 1\n            canvasX.value = (offsetWidth - props.width) / 2\n            canvasY.value = (offsetHeight - props.height) / 2\n        }\n\n        /**\n         * Panel Pointer Down\n         * @param event\n         */\n        const panelPointerDown = (event: PointerEvent) => {\n            if (event.srcElement === container.value || event.srcElement === canvas.value) selectedChart.value = 0\n        }\n\n        /**\n         * Pointer down\n         * @param event\n         */\n        const pointerDown = (event: PointerEvent) => {\n            if (!canvasStatusMove.value || props.lock) return\n\n            pointerPressed.value = true\n\n            canvas.value.setPointerCapture(event.pointerId)\n\n            point.value           = { x: event.clientX, y: event.clientY }\n            lastPointermove.value = { x: event.clientX, y: event.clientY }\n        }\n\n        /**\n         * Pointer move\n         * @param event\n         */\n        const pointermove = (event: PointerEvent) => {\n            if (!pointerPressed.value) return\n\n            event.preventDefault()\n\n            const current = { x: event.clientX, y: event.clientY }\n\n            diff.value = {\n                x: current.x - lastPointermove.value.x,\n                y: current.y - lastPointermove.value.y,\n            }\n\n            lastPointermove.value = { x: current.x, y: current.y }\n            canvasX.value += diff.value.x\n            canvasY.value += diff.value.y\n        }\n\n        /**\n         * Pointer up\n         */\n        const pointerUp = () => {\n            pointerPressed.value = false\n        }\n\n        /**\n         * Pointer cancel\n         */\n        const pointerCancel = () => {\n            pointerPressed.value = false\n        }\n\n        /**\n         * chart move pointer down\n         */\n        const chartMovePointerDown = (event: PointerEvent, chart: ChartItem) => {\n            if (canvasStatusMove.value || props.lock) return\n\n            selectedChart.value = chart.id as number\n\n            movingChart.value   = chart\n            chartPosition.value = {\n                x: event.clientX - chart.x * scale.value,\n                y: event.clientY - chart.y * scale.value,\n            }\n\n            originalChart.value = {\n                id    : chart.id,\n                x     : chart.x,\n                y     : chart.y,\n                width : chart.width,\n                height: chart.height,\n            }\n\n            document.onpointermove = (ev: PointerEvent) => {\n                if (!movingChart.value) return false\n                ev.preventDefault()\n                const { clientX, clientY } = ev\n\n                const offsetX = (clientX - chartPosition.value.x) / scale.value\n                const offsetY = (clientY - chartPosition.value.y) / scale.value\n\n                const { width, height } = movingChart.value\n                const maxX              = props.width - width\n                const maxY              = props.height - height\n                let newX                = offsetX\n                let newY                = offsetY\n\n                if (newX < 0) newX = 0\n                if (newY < 0) newY = 0\n                if (newX > maxX) newX = maxX\n                if (newY > maxY) newY = maxY\n\n                movingChart.value.x = newX\n                movingChart.value.y = newY\n            }\n        }\n\n        /**\n         * chart move pointer up\n         */\n        const chartMovePointerUp = (event, item) => {\n            document.onpointermove = null\n            movingChart.value      = null\n\n            if (originalChart.value.x !== item.x || originalChart.value.y !== item.y) ctx.emit('chart-move', item)\n        }\n\n        /**\n         * chart move cancel\n         */\n        const chartMoveCancel = () => {\n            document.onpointermove = null\n            movingChart.value      = null\n        }\n\n        /**\n         * resize pointer down\n         */\n        const resizePointerDown = (event: DragEvent, chart: ChartItem, direction: string) => {\n            event.stopPropagation()\n\n            if (canvasStatusMove.value) return\n\n            const chartWidth      = chart.width\n            const chartHeight     = chart.height\n            const chartX          = chart.x\n            const chartY          = chart.y\n            resizingChart.value   = chart\n            resizeDirection.value = direction\n            chartPosition.value   = {\n                x: event.clientX,\n                y: event.clientY,\n            }\n\n            originalChart.value = {\n                id    : chart.id,\n                x     : chart.x,\n                y     : chart.y,\n                width : chart.width,\n                height: chart.height,\n            }\n\n            document.onpointermove = (ev: PointerEvent) => {\n                if (!resizingChart.value) return false\n\n                const { clientX, clientY } = ev\n                const offsetX              = (clientX - chartPosition.value.x) / scale.value\n                const offsetY              = (clientY - chartPosition.value.y) / scale.value\n\n                const { width, height, x, y } = resizingChart.value\n                const chartMaxWidth           = props.width - x\n                const chartMaxHeight          = props.height - y\n                const direction               = resizeDirection.value\n\n                let newWidth  = width\n                let newHeight = height\n                let newX      = x\n                let newY      = y\n\n                const resizeWidth  = () => {\n                    newWidth = chartWidth + offsetX\n                    if (newWidth < props.chartMinWidth) newWidth = width\n                    if (newWidth > chartMaxWidth) newWidth = chartMaxWidth\n                }\n                const resizeHeight = () => {\n                    newHeight = chartHeight + offsetY\n                    if (newHeight < props.chartMinHeight) newHeight = height\n                    if (newHeight > chartMaxHeight) newHeight = chartMaxHeight\n                }\n\n                const resizeWidthWithX  = () => {\n                    newX     = chartX + offsetX\n                    newWidth = chartWidth - offsetX\n\n                    if (newX < 0) {\n                        newX     = 0\n                        newWidth = width + x\n                    }\n\n                    if (newWidth < props.chartMinWidth) {\n                        newWidth = width\n                        newX     = x\n                    }\n                }\n                const resizeHeightWithY = () => {\n                    newY      = chartY + offsetY\n                    newHeight = chartHeight - offsetY\n\n                    if (newY < 0) {\n                        newY      = 0\n                        newHeight = height + y\n                    }\n\n                    if (newHeight < props.chartMinHeight) {\n                        newHeight = height\n                        newY      = y\n                    }\n                }\n\n                if (direction === 'a') {\n                    resizeWidthWithX()\n                    resizeHeightWithY()\n                }\n\n                if (direction === 'b') {\n                    resizeWidth()\n                    resizeHeightWithY()\n                }\n\n                if (direction === 'c') {\n                    resizeWidth()\n                    resizeHeight()\n                }\n\n                if (direction === 'd') {\n                    resizeWidthWithX()\n                    resizeHeight()\n                }\n\n                if (direction === 'i') resizeHeightWithY()\n                if (direction === 'j') resizeWidth()\n                if (direction === 'k') resizeHeight()\n                if (direction === 'l') resizeWidthWithX()\n\n                resizingChart.value.width  = newWidth\n                resizingChart.value.height = newHeight\n                resizingChart.value.x      = newX\n                resizingChart.value.y      = newY\n            }\n        }\n\n        /**\n         * resize pointer up\n         */\n        const resizePointerUp = (event, item) => {\n            event.stopPropagation()\n\n            document.onpointermove = null\n            resizingChart.value    = null\n\n            if (originalChart.value.x !== item.x\n                || originalChart.value.y !== item.y\n                || originalChart.value.width !== item.width\n                || originalChart.value.height !== item.height) ctx.emit('chart-scale', item)\n        }\n\n        /**\n         * Dragover over container (move/resize)\n         * @param event\n         */\n        const dragoverContainer = (event: DragEvent) => {\n            event.preventDefault()\n\n            const { clientX, clientY } = event\n            chartPosition.value        = { x: clientX, y: clientY }\n        }\n\n        /**\n         * Drop in canvas\n         * @param event\n         */\n        const dropInCanvas = (event: DragEvent) => {\n            if (movingChart.value || resizingChart.value) return\n\n            dragend.value           = true\n            outCanvasDragover.value = false\n\n            ctx.emit('canvas-drop', event, {\n                x: event.offsetX,\n                y: event.offsetY,\n            })\n        }\n\n        /**\n         * Drag in from outside the canvas\n         */\n        const dragenterCanvas = () => {\n            if (movingChart.value || resizingChart.value) return\n\n            outCanvasDragover.value = true\n        }\n\n        /**\n         * Drag in from outside the canvas cancel\n         */\n        const dragleaveCanvas = (event) => {\n            if (canvas.value === event.srcElement) outCanvasDragover.value = false\n        }\n\n        /**\n         * Canvas init\n         */\n        function init () {\n            const { offsetWidth, offsetHeight } = container.value as HTMLElement\n            const defaultMaxWidth               = offsetWidth - props.padding\n            const defaultMaxHeight              = offsetHeight - props.padding\n            const ratioContainer                = offsetWidth / offsetHeight\n            const ratioCanvas                   = props.width / props.height\n\n            defaultScale.value = ratioContainer < ratioCanvas\n                ? defaultMaxWidth / props.width\n                : defaultMaxHeight / props.height\n            defaultX.value     = (offsetWidth - props.width) / 2\n            defaultY.value     = (offsetHeight - props.height) / 2\n            scale.value        = defaultScale.value\n            canvasX.value      = defaultX.value\n            canvasY.value      = defaultY.value\n        }\n\n        /**\n         * Create Resizable h Dom\n         * @param chartItem\n         */\n        function createResizableList (chartItem) {\n            const pointDirectionList          = ['a', 'b', 'c', 'd']\n            const resizablePointDirectionList = ['e', 'f', 'g', 'h']\n            const lineDirectionList           = ['i', 'j', 'k', 'l']\n            const resizableList               = []\n\n            pointDirectionList.forEach(direction => {\n                resizableList.push(h('div', {\n                    class        : [\n                        'resizable-point',\n                        direction,\n                    ],\n                    key          : direction,\n                    onPointerdown: event => resizePointerDown(event, chartItem, direction),\n                    onPointerup  : event => resizePointerUp(event, chartItem),\n                }))\n            })\n\n            resizablePointDirectionList.forEach(direction => {\n                resizableList.push(h('div', {\n                    class: [\n                        'resizable-point',\n                        direction,\n                    ],\n                    key  : direction,\n                }))\n            })\n\n            lineDirectionList.forEach(direction => {\n                resizableList.push(h('div', {\n                    class        : [\n                        'resizable-line',\n                        direction,\n                    ],\n                    key          : direction,\n                    onPointerdown: event => resizePointerDown(event, chartItem, direction),\n                    onPointerup  : event => resizePointerUp(event, chartItem),\n                }))\n            })\n\n            return resizableList\n        }\n\n        /**\n         * Create Chart h Dom\n         */\n        function createChartList () {\n            const chartList = []\n\n            if (dragend.value) {\n                selectedChart.value = props.chartId\n                dragend.value       = false\n            }\n\n            props.data.forEach((item, index) => {\n\n                const defaultSlot = ctx.slots.chart({\n                    chart: item,\n                    index,\n                })\n                const customSlot  = ctx.slots[`chart-${item.id}`]\n                    ? ctx.slots[`chart-${item.id}`]({\n                        chart: item,\n                        index,\n                    })\n                    : null\n\n                chartList.push(h('div', {\n                    class          : [\n                        'chart-item',\n                        movingChart.value?.id === item.id ? 'moving' : '',\n                        resizingChart.value?.id === item.id ? 'resizing' : '',\n                    ],\n                    key            : item.id,\n                    style          : chartStyleComputed.value(item, index),\n                    ['data-id']    : item.id,\n                    onPointerdown  : event => chartMovePointerDown(event, item),\n                    onPointerup    : event => chartMovePointerUp(event, item),\n                    onPointercancel: chartMoveCancel,\n                }, [\n                    h('div', {\n                        class: ['content'],\n                    }, [\n                        defaultSlot,\n                        customSlot,\n                    ]),\n                    h('div', {\n                        class: ['resizable'],\n                        style: pointStyleComputed.value(item),\n                    }, createResizableList(item)),\n                ]))\n            })\n\n            return chartList\n        }\n\n        /**\n         * Catch Event mouseup\n         */\n        function catchMouseup () {\n            document.onpointermove = null\n            resizingChart.value    = null\n            movingChart.value      = null\n        }\n\n        onMounted(() => {\n            init()\n            window.addEventListener('resize', init)\n            window.addEventListener('mouseup', catchMouseup)\n        })\n\n        onBeforeUnmount(() => {\n            window.removeEventListener('resize', init)\n            window.removeEventListener('mouseup', catchMouseup)\n        })\n\n        return () => [\n            h('div', {\n                class    : [\n                    'draggable-panel',\n                    props.lock ? 'lock' : '',\n                ],\n                tabindex : -1,\n                ref      : container,\n                autofocus: true,\n                onkeydown (event: KeyboardEvent) {\n                    const { ctrlKey, metaKey } = event\n                    const code                 = event.code.toLowerCase()\n\n                    // TODO: exact\n                    if (code === 'space') return canvasStatusMove.value = true\n                    if (code === 'equal' && (ctrlKey || metaKey)) return scaleAddByKeyboard(event)\n                    if (code === 'minus' && (ctrlKey || metaKey)) return scaleSubByKeyboard(event)\n                    if (code === 'digit0') {\n                        event.preventDefault()\n                        return resetScale()\n                    }\n                    if (code === 'enter') {\n                        event.preventDefault()\n                        return realScale()\n                    }\n                },\n                onkeyup (event: KeyboardEvent) {\n                    const code = event.code.toLowerCase()\n\n                    if (code === 'space') canvasStatusMove.value = false\n                },\n                onPointerdown: panelPointerDown,\n                onwheel      : scaleByWheel,\n                onDragover   : dragoverContainer,\n            }, h('div', {\n                ref            : canvas,\n                class          : [\n                    'canvas',\n                    outCanvasDragover.value ? 'out-canvas-dragover' : '',\n                    canvasStatusMove.value ? 'moving' : '',\n                ],\n                style          : canvasStyleComputed.value,\n                onPointerdown  : pointerDown,\n                onPointermove  : pointermove,\n                onPointerup    : pointerUp,\n                onPointercancel: pointerCancel,\n                onDragenter    : dragenterCanvas,\n                onDragleave    : dragleaveCanvas,\n                onDrop         : dropInCanvas,\n            }, createChartList())),\n        ]\n    },\n}))\n"],"names":["markRaw","defineComponent","ref","computed","watch","h","onMounted","onBeforeUnmount"],"mappings":"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"}